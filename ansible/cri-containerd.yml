---
- name: Create a directory for containerd config
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Ensure containerd config directory exists.
  file:
    path: /etc/containerd
    state: directory
  register: containerd_dir

- name: Get defaults from containerd.
  command: containerd config default
  changed_when: false
  register: containerd_config_default
  when: containerd_config_default_write

- name: Prepare containerd/config.toml from default config
  copy:
    dest: /tmp/containerd_config.toml
    content: "{{ containerd_config_default.stdout }}"
  when: containerd_config_default_write
  changed_when: false

- name: Set Cgroup driver to systemd
  lineinfile:
    insertafter: '.*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]$'
    line: '          SystemdCgroup = true'
    state: present
    path: /tmp/containerd_config.toml
  when: containerd_config_default_write and containerd_config_cgroup_driver_systemd
  changed_when: false

- name: Register on systemd
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /lib/systemd/system/containerd.service

- name: Reload daemon
  ansible.builtin.shell:
    cmd: systemctl daemon-reload

- name:  enable containerd
  ansible.builtin.shell:
    cmd: systemctl enable --now containerd

- name: Make sure  SystemdCgroup = false is not set
  ansible.builtin.lineinfile:
    path: /tmp/containerd_config.toml
    state: absent
    line: '            SystemdCgroup = false'
  notify: Restart containerd
  when: containerd_config_default_write and containerd_config_cgroup_driver_systemd
  changed_when: false

- name: Copy config.toml to /etc/containerd
  copy:
    remote_src: true
    src: /tmp/containerd_config.toml
    dest: /etc/containerd/config.toml
  notify: Restart containerd
  when: containerd_config_default_write

- name: Cleanup temporary file
  file:
    path: /tmp/containerd_config.toml
    state: absent
  changed_when: false

- name: Ensure containerd is restarted immediately if necessary.
  meta: flush_handlers

- name: Start Containerd
  systemd: name=containerd daemon_reload=yes state=started enabled=yes

- name: "Load br_netfilter kernel module"
  modprobe:
    name: br_netfilter
    state: present

- name: Set bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1

- name: Set ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1

- name: Check kubelet args in kubelet config
  shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /lib/systemd/system/kubelet.service.d/10-kubeadm.conf || true
  register: check_args

- name: Add runtime args in kubelet conf
  lineinfile:
    dest: "/lib/systemd/system/kubelet.service.d/10-kubeadm.conf"
    line: "Environment=\"KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }} --runtime-cgroups=/system.slice/containerd.service --container-runtime=remote --runtime-request-timeout=5m --container-runtime-endpoint=unix:///run/containerd/containerd.sock\""
    insertafter: '\[Service\]'
  when: check_args.stdout == ""

- name: Start Kubelet
  systemd: name=kubelet daemon_reload=yes state=started enabled=yes

- name: Pre-pull pause container image
  shell: |
    /usr/local/bin/ctr pull registry.k8s.io/pause:3.10
    /usr/bin/crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock
    /usr/bin/crictl pull registry.k8s.io/pause:3.10