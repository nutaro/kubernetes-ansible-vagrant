---

- name: get crio package key
  ansible.builtin.shell:
    cmd: curl -fsSL https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg

- name: install crio repository
  ansible.builtin.shell:
    cmd: echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/ /" | tee /etc/apt/sources.list.d/cri-o.list
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - cri-o

- name: start crio
  ansible.builtin.shell:
    cmd: systemctl enable --now crio

- name: pass ipforward to k8s
  ansible.builtin.shell:
    cmd: cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-k8s.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1  net.bridge.bridge-nf-call-ip6tables = 1  EOF
- name: apply sysctl params
  command: sysctl --system

- name: Check kubelet args in kubelet config
  shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /lib/systemd/system/kubelet.service.d/10-kubeadm.conf || true
  register: check_args

- name: Add runtime args in kubelet conf
  lineinfile:
    dest: "/lib/systemd/system/kubelet.service.d/10-kubeadm.conf"
    line: "Environment=\"KUBELET_EXTRA_ARGS=--node-ip={{ output.stdout }} --runtime-cgroups=/system.slice/crio.service --container-runtime=remote --runtime-request-timeout=10m --container-runtime-endpoint=unix:///var/run/crio/crio.sock\""
    insertafter: '\[Service\]'
  when: check_args.stdout == ""

- name: Start Kubelet
  systemd: name=kubelet daemon_reload=yes state=started enabled=yes

- name: Pre-pull pause container image
  shell: |
    /usr/local/bin/ctr pull registry.k8s.io/pause:3.10
    /usr/bin/crictl config --set runtime-endpoint=unix:///var/run/crio/crio.sock
    /usr/bin/crictl pull registry.k8s.io/pause:3.10